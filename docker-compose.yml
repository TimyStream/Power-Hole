version: "3.9"

services:

  pdns_db:
    image: postgres:13
    container_name: pdns_db
    restart: always
    networks:
      - pdns_db_net
    environment:
      POSTGRES_DB: pdns
      POSTGRES_USER: pdns
      POSTGRES_PASSWORD_FILE: /run/secrets/db_passwd
    volumes:
      - db:/var/lib/postgresql/data
      - ./authoritative/init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - db_passwd
    user: postgres:postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pdns" ]
      interval: 10s
      timeout: 5s
      retries: 10
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges

  pdns_authoritative:
    build: authoritative
    image: powerdns:authoritative
    container_name: pdns_authoritative
    restart: always
    networks:
      pdns_db_net:
      pdns_web_net:
      pdns_link_net:
        ipv4_address: "172.26.0.114"
    depends_on:
      pdns_db:
        condition: service_healthy
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges

  pdns_admin_db:
    image: postgres:13
    container_name: pdns_admin_db
    restart: always
    networks:
      - pdns_admin_db_net
    environment:
      POSTGRES_DB: pdns_admin
      POSTGRES_USER: pdns_admin
      POSTGRES_PASSWORD_FILE: /run/secrets/admin_db_password
    volumes:
      - db_admin:/var/lib/postgresql/data
    secrets:
      - admin_db_password
    user: postgres:postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pdns_admin" ]
      interval: 10s
      timeout: 5s
      retries: 10
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges

  pdns_admin:
    image: ngoduykhanh/powerdns-admin:latest
    container_name: pdns_admin
    restart: always
    ports:
      - "8080:80"
    networks:
      - pdns_admin_db_net
      - pdns_web_net
    environment:
      - SECRET_KEY_FILE=/run/secrets/pdns_admin_secret_key
      - SQLALCHEMY_DATABASE_URI_FILE=/run/secrets/db_uri
      - GUNICORN_TIMEOUT=60
      - GUNICORN_WORKERS=2
      - GUNICORN_LOGLEVEL=DEBUG
      - OFFLINE_MODE=False
    secrets:
      - pdns_admin_secret_key
      - db_uri
    depends_on:
      pdns_admin_db:
        condition: service_healthy
      pdns_authoritative:
        condition: service_healthy
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges

  pdns_recursor:
    build:
      context: recursor
      args:
        UPSTREAM: "9.9.9.9"
    image: powerdns:recursor
    container_name: pdns_recursor
    restart: always
    networks:
      pdns_link_net:
      hole_net:
        ipv4_address: "172.26.0.122"
    depends_on:
      pdns_authoritative:
        condition: service_healthy
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges

  pihole:
    image: pihole/pihole
    container_name: pihole
    hostname: pihole
    restart: always
    ports:
      - "8081:80"
      - "53:53/tcp"
      - "53:53/udp"
    networks:
      - hole_net
    environment:
      - TZ=Europe/Amsterdam
      - PIHOLE_DNS_=172.26.0.122
      - DNSMASQ_LISTENING=all
    volumes:
      - pihole:/etc/pihole/
      - dnsmasq:/etc/dnsmasq.d/
    depends_on:
      pdns_recursor:
        condition: service_healthy
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
      - SETFCAP
    security_opt:
      - no-new-privileges

volumes:
  db:
  db_admin:
  pihole:
  dnsmasq:

secrets:

  db_passwd:
    file: ./secrets/db_password.txt

  pdns_admin_secret_key:
    file: ./secrets/pdns_admin_secret_key.txt

  admin_db_password:
    file: ./secrets/admin_db_password.txt

  db_uri:
    file: ./secrets/db_uri.txt

networks:

  pdns_db_net:
    name: pdns_db_net
    internal: true
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.88/29"
    driver_opts:
      com.docker.network.bridge.name: dbr-pdns_db

  pdns_admin_db_net:
    name: pdns_admin_db_net
    internal: true
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.96/29"
    driver_opts:
      com.docker.network.bridge.name: dbr-pdns_admin

  pdns_web_net:
    name: pdns_web_net
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.104/29"
    driver_opts:
      com.docker.network.bridge.name: dbr-pdns_web

  pdns_link_net:
    name: pdns_link_net
    internal: true
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.112/29"
    driver_opts:
      com.docker.network.bridge.name: dbr-pdns_link

  hole_net:
    name: hole_net
    ipam:
      driver: default
      config:
        - subnet: "172.26.0.120/29"
    driver_opts:
      com.docker.network.bridge.name: dbr-hole
